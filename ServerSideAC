local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local NetworkOwnership = game:GetService("NetworkOwnership")
local HttpService = game:GetService("HttpService")
local DataStoreService = game:GetService("DataStoreService")
local PhysicsService = game:GetService("PhysicsService")

-- Configuration
local CONFIG = {
	MAX_SPEED = 100,
	TELEPORT_THRESHOLD = 50,
	VIOLATION_THRESHOLD = 3,
	CHECK_INTERVAL = 0.5,
	BAN_DURATION = 86400 * 7,
	DEFAULT_WALK_SPEED = 16,
	WALK_SPEED_TOLERANCE = 0.1,
	MAX_ALLOWED_WALKSPEED = 70,
	RAPID_INPUT_THRESHOLD = 20,
	RAPID_INPUT_TIME_FRAME = 1,
	TELEPORT_COOLDOWN = 5,
	REPORT_COOLDOWN = 60,
	MAX_REPORTS_PER_DAY = 10,
	BAN_MESSAGE = "You have been banned for 7 days due to suspicious activity. If you believe this is an error, please contact our support team."
}

-- Secure state management
local State = {
	playerData = {},
	encryptionKeys = {},
	secureCallCache = {},
	playerReports = {},
}

local function decryptData(encryptedData, key)
	local ivLength = 16
	local iv = {string.byte(encryptedData, 1, ivLength)}
	local dataBytes = {string.byte(encryptedData, ivLength + 1, -1)}
	local keyBytes = {string.byte(key, 1, -1)}

	local decrypted = table.create(#dataBytes, 0)
	for i = 1, #dataBytes do
		decrypted[i] = bit32.bxor(dataBytes[i], keyBytes[(i - 1) % #keyBytes + 1], iv[(i - 1) % 16 + 1])
	end

	return string.char(unpack(decrypted))
end

local function initializeEncryptionKey()
	local encryptionKey = ReplicatedStorage:FindFirstChild("EncryptionKey")
	if not encryptionKey then
		encryptionKey = Instance.new("StringValue")
		encryptionKey.Name = "EncryptionKey"
		encryptionKey.Value = HttpService:GenerateGUID(false)
		encryptionKey.Parent = ReplicatedStorage
	end
	return encryptionKey
end

-- Enhanced encryption system
local function generateNewEncryptionKey()
	local key = HttpService:GenerateGUID(false)
	table.insert(State.encryptionKeys, 1, key)
	if #State.encryptionKeys > 5 then
		table.remove(State.encryptionKeys)
	end
end

-- Initialize remote events
local function initializeRemotes()
	local function createOrGetRemote(name)
		local remote = ReplicatedStorage:FindFirstChild(name)
		if not remote then
			remote = Instance.new("RemoteEvent")
			remote.Name = name
			remote.Parent = ReplicatedStorage
		end
		return remote
	end

	return {
		playerMovement = createOrGetRemote("PlayerMovement"),
		kickRemote = createOrGetRemote("KickRemote"),
		reportEvent = createOrGetRemote("ReportEvent")
	}
end

-- Enhanced data store handling
local function initializeDataStore(name)
	if RunService:IsStudio() then
		return {
			GetAsync = function() return nil end,
			SetAsync = function() end,
			RemoveAsync = function() end
		}
	end
	return DataStoreService:GetDataStore(name)
end

local SecuritySystem = {
	remotes = initializeRemotes(),
	banStore = initializeDataStore("PlayerBans_v3"),

	init = function(self)
		initializeEncryptionKey()
		generateNewEncryptionKey()
		self:setupEventHandlers()
		self:startPeriodicChecks()
		State.reportStore = initializeDataStore("PlayerReports_v1")
	end,

	startPeriodicChecks = function(self)
		RunService.Heartbeat:Connect(function()
			for player, data in pairs(State.playerData) do
				if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
					local position = player.Character.HumanoidRootPart.Position
					local velocity = player.Character.HumanoidRootPart.Velocity
					self:validatePlayerMovement(player, position, velocity)
				end
			end
		end)
	end,

	validatePlayerMovement = function(self, player, position, velocity)
		local data = State.playerData[player]
		if not data then return end

		local speed = velocity.Magnitude
		if speed > CONFIG.MAX_SPEED then
			data.violations = data.violations + 1
			if data.violations >= CONFIG.VIOLATION_THRESHOLD then
				self:banPlayer(player)
			end
		end
	end,

	banPlayer = function(self, player)
		local banExpiration = os.time() + CONFIG.BAN_DURATION
		local success = pcall(function()
			self.banStore:SetAsync(player.UserId, {expiration = banExpiration})
		end)
		if success then
			player:Kick(CONFIG.BAN_MESSAGE)
		end
	end,

	isPlayerBanned = function(self, player)
		local success, result = pcall(function()
			return self.banStore:GetAsync(player.UserId)
		end)

		if success and result then
			local banExpiration = result.expiration
			if banExpiration > os.time() then
				return true
			else
				self.banStore:RemoveAsync(player.UserId)
			end
		end
		return false
	end,

	handleReport = function(self, reporter, reportData)
		local reporterData = State.playerReports[reporter.UserId]

		if not reporterData then
			reporterData = {
				lastReport = 0,
				dailyReports = 0,
				lastResetTime = os.time()
			}
			State.playerReports[reporter.UserId] = reporterData
		end

		if os.time() - reporterData.lastReport < CONFIG.REPORT_COOLDOWN then
			return false, "Please wait before submitting another report"
		end

		if os.time() - reporterData.lastResetTime > 86400 then
			reporterData.dailyReports = 0
			reporterData.lastResetTime = os.time()
		end

		if reporterData.dailyReports >= CONFIG.MAX_REPORTS_PER_DAY then
			return false, "You've reached the maximum number of reports for today"
		end

		local success, err = pcall(function()
			local reportKey = reporter.UserId .. "_" .. os.time()
			local reportData = {
				reporter = reporter.UserId,
				category = reportData.category,
				evidence = reportData.evidence,
				timestamp = reportData.timestamp
			}
			if not RunService:IsStudio() then
				State.reportStore:SetAsync(reportKey, reportData)
			end
		end)

		if success then
			reporterData.lastReport = os.time()
			reporterData.dailyReports = reporterData.dailyReports + 1
			return true, "Report submitted successfully"
		else
			return false, "Failed to submit report"
		end
	end,

	initializePlayerData = function(self, player)
		State.playerData[player] = {
			violations = 0,
			lastPosition = Vector3.new(0, 0, 0),
			lastCheckTime = tick()
		}
	end,

	handleCharacterAdded = function(self, player, character)
		task.wait(1)
		local humanoid = character:WaitForChild("Humanoid")
		local rootPart = character:WaitForChild("HumanoidRootPart")

		pcall(function()
			NetworkOwnership:SetNetworkOwner(rootPart, player)
		end)

		humanoid:GetPropertyChangedSignal("WalkSpeed"):Connect(function()
			if math.abs(humanoid.WalkSpeed - CONFIG.DEFAULT_WALK_SPEED) > CONFIG.WALK_SPEED_TOLERANCE then
				player:Kick("Unexpected WalkSpeed change detected")
			end
		end)
	end,

	setupEventHandlers = function(self)
		Players.PlayerAdded:Connect(function(player)
			self:handlePlayerJoin(player)
		end)

		Players.PlayerRemoving:Connect(function(player)
			State.playerData[player] = nil
			State.playerReports[player.UserId] = nil
		end)

		self.remotes.playerMovement.OnServerEvent:Connect(function(player, ...)
			self:handleMovementEvent(player, ...)
		end)

		self.remotes.reportEvent.OnServerEvent:Connect(function(player, reportData)
			local success, message = self:handleReport(player, reportData)
		end)
	end,

	handlePlayerJoin = function(self, player)
		if self:isPlayerBanned(player) then
			player:Kick(CONFIG.BAN_MESSAGE)
			return
		end

		self:initializePlayerData(player)

		player.CharacterAdded:Connect(function(character)
			self:handleCharacterAdded(player, character)
		end)
	end,

	handleMovementEvent = function(self, player, encryptedPos, encryptedVel)
		local data = State.playerData[player]
		if not data then return end

		local key = State.encryptionKeys[1]
		local posStr = decryptData(encryptedPos, key)
		local velStr = decryptData(encryptedVel, key)

		local px, py, pz = string.match(posStr, "([^,]+),([^,]+),([^,]+)")
		local vx, vy, vz = string.match(velStr, "([^,]+),([^,]+),([^,]+)")

		local position = Vector3.new(tonumber(px), tonumber(py), tonumber(pz))
		local velocity = Vector3.new(tonumber(vx), tonumber(vy), tonumber(vz))

		local distanceMoved = (position - data.lastPosition).Magnitude
		if distanceMoved > CONFIG.TELEPORT_THRESHOLD then
			local timeSinceLastCheck = tick() - data.lastCheckTime
			if timeSinceLastCheck < CONFIG.TELEPORT_COOLDOWN then
				data.violations = data.violations + 1
				if data.violations >= CONFIG.VIOLATION_THRESHOLD then
					self:banPlayer(player)
					return
				end
			end
		end

		local speed = velocity.Magnitude
		if speed > CONFIG.MAX_SPEED then
			data.violations = data.violations + 1
			if data.violations >= CONFIG.VIOLATION_THRESHOLD then
				self:banPlayer(player)
				return
			end
		end

		if velocity.Y > CONFIG.MAX_SPEED * 0.5 and 
			not player.Character:FindFirstChild("Humanoid").Jump then
			data.violations = data.violations + 1
			if data.violations >= CONFIG.VIOLATION_THRESHOLD then
				self:banPlayer(player)
				return
			end
		end

		data.lastPosition = position
		data.lastCheckTime = tick()

		if tick() - data.lastCheckTime > 10 then
			data.violations = math.max(0, data.violations - 1)
		end
	end
}

SecuritySystem:init()
