local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local NetworkOwnership = game:GetService("NetworkOwnership")
local HttpService = game:GetService("HttpService")
local DataStoreService = game:GetService("DataStoreService")
local PhysicsService = game:GetService("PhysicsService")

-- Obfuscate important variable names
local _a, _b, _c, _d = Players, ReplicatedStorage, RunService, NetworkOwnership
local _e, _f, _g = HttpService, DataStoreService, PhysicsService

-- Create a secure random number generator
local random = Random.new(tick())

-- Encryption key rotation
local encryptionKeys = {}
local function rotateEncryptionKey()
	table.insert(encryptionKeys, 1, _e:GenerateGUID(false))
	if #encryptionKeys > 5 then
		table.remove(encryptionKeys)
	end
end
rotateEncryptionKey()
_c.Heartbeat:Connect(function()
	if random:NextNumber() < 0.001 then  -- 0.1% chance each heartbeat
		rotateEncryptionKey()
	end
end)

local playerMovement = _b:FindFirstChild("PlayerMovement")
if not playerMovement then
	playerMovement = Instance.new("RemoteEvent")
	playerMovement.Name = "PlayerMovement"
	playerMovement.Parent = _b
end

local kickRemote = _b:FindFirstChild("KickRemote")
if not kickRemote then
	kickRemote = Instance.new("RemoteEvent")
	kickRemote.Name = "KickRemote"
	kickRemote.Parent = _b
end

game:GetService("LogService").MessageOut:Connect(function() return end)

local encryptionKeyValue = _b:FindFirstChild("EncryptionKey")
if not encryptionKeyValue then
	encryptionKeyValue = Instance.new("StringValue")
	encryptionKeyValue.Name = "EncryptionKey"
	encryptionKeyValue.Parent = _b
	encryptionKeyValue.Value = _e:GenerateGUID(false)
end

local encryptionKey = encryptionKeyValue.Value

-- Constants (obfuscated)
local _h, _i, _j = 100, 50, 3  -- MAX_SPEED, TELEPORT_THRESHOLD, VIOLATION_THRESHOLD
local _k, _l = 0.5, 86400 * 7  -- CHECK_INTERVAL, BAN_DURATION
local _m = "You have been banned for 7 days due to suspicious activity. If you believe this is an error, please contact our support team."
local _n, _o, _p = 16, 0.1, 70  -- DEFAULT_WALK_SPEED, WALK_SPEED_TOLERANCE, MAX_ALLOWED_WALKSPEED
local _q, _r, _s = 20, 1, 5  -- RAPID_INPUT_THRESHOLD, RAPID_INPUT_TIME_FRAME, TELEPORT_COOLDOWN

local playerData = {}

local mockDataStore = {}
function mockDataStore:GetAsync(key) return nil end
function mockDataStore:SetAsync(key, value) end
function mockDataStore:RemoveAsync(key) end

local banStore
if _c:IsStudio() then
	banStore = mockDataStore
else
	banStore = _f:GetDataStore("PlayerBans_v2")
end

-- Function to get player from script
local function getPlayerFromScript(script)
	while script do
		local player = _a:GetPlayerFromCharacter(script:FindFirstAncestorOfClass("Model"))
		if player then
			return player
		end
		script = script.Parent
	end
	return nil
end

-- Secure function wrapper
local function _t(func)
	return function(...)
		if debug.info(2, "s") ~= script.Name then
			local player = getPlayerFromScript(getfenv(2).script)
			if player then
				_u(player, "Security violation detected.")
			else
				warn("Security violation detected, but couldn't identify the player.")
			end
			return
		end
		return func(...)
	end
end

local secureCallCache = {}
local function secureCall(func, ...)
	local key = tostring(func)
	if not secureCallCache[key] then
		secureCallCache[key] = function(...)
			return coroutine.wrap(function(...)
				return func(...)
			end)(...)
		end
	end
	return secureCallCache[key](...)
end

local function isPlayerBanned(player)
	local success, result = pcall(function()
		return banStore:GetAsync(player.UserId)
	end)

	if success and result then
		local banExpiration = result.expiration
		if banExpiration > os.time() then
			return true
		else
			banStore:RemoveAsync(player.UserId)
		end
	end

	return false
end

local function _u(player, reason)
	player:Kick(reason)
end
_u = _t(_u)

local function banPlayer(player)
	local banExpiration = os.time() + _l
	local success, errorMessage = pcall(function()
		banStore:SetAsync(player.UserId, {expiration = banExpiration})
	end)

	if success then
		_u(player, _m)
	end
end
banPlayer = _t(banPlayer)

local function createPlayerData(player)
	playerData[player] = {
		lastPosition = Vector3.new(0, 0, 0),
		lastCheckTime = tick(),
		violations = 0,
		lastTeleportTime = 0,
		inputHistory = {},
		spawnTime = tick(),
		originalWalkSpeed = _n
	}
end

local function removePlayerData(player)
	playerData[player] = nil
end

local function decryptData(encryptedData)
	local success, result = pcall(function()
		local dataBytes = {string.byte(encryptedData, 1, -1)}
		local keyBytes = {string.byte(encryptionKeys[1], 1, -1)}
		local iv = {unpack(dataBytes, 1, 16)}
		table.remove(dataBytes, 1, 16)
		local decrypted = table.create(#dataBytes, 0)
		for i = 1, #dataBytes do
			decrypted[i] = bit32.bxor(dataBytes[i], keyBytes[(i - 1) % #keyBytes + 1], iv[(i - 1) % 16 + 1])
		end
		return string.char(unpack(decrypted))
	end)

	return success and result or nil
end

local function validatePlayerMovement(player, position, velocity)
	local data = playerData[player]
	if not data then return end

	local currentTime = tick()
	local timeDelta = currentTime - data.lastCheckTime
	local distanceMoved = (position - data.lastPosition).Magnitude
	local speed = distanceMoved / timeDelta

	if speed > _h then
		data.violations = data.violations + 1
	end

	if data.violations >= _j then
		banPlayer(player)
	end

	data.lastPosition = position
	data.lastCheckTime = currentTime
end

local function handlePossibleTeleport(player, distance)
	local data = playerData[player]
	if not data then return end

	local currentTime = tick()
	if currentTime - data.lastTeleportTime < _s then
		data.violations = data.violations + 1
		if data.violations >= _j then
			banPlayer(player)
		end
	else
		data.lastTeleportTime = currentTime
	end
end

local function handleWalkSpeedChange(player, newWalkSpeed)
	local data = playerData[player]
	if not data then return end

	if math.abs(newWalkSpeed - data.originalWalkSpeed) > _o then
		_u(player, "Unexpected WalkSpeed change detected.")
	end
end

local function handleInputDetected(player, inputInfo)
	local data = playerData[player]
	if not data then return end

	local currentTime = tick()
	data.inputHistory[#data.inputHistory + 1] = currentTime

	while #data.inputHistory > 0 and currentTime - data.inputHistory[1] > _r do
		table.remove(data.inputHistory, 1)
	end

	if #data.inputHistory >= _q then
		data.violations = data.violations + 1
		if data.violations >= _j then
			banPlayer(player)
		end
	end
end

local function onCharacterAdded(player, character)
	task.wait(1)  -- Wait for 1 second after character spawn

	createPlayerData(player)
	playerData[player].spawnTime = tick()

	local essentialParts = {
		character:WaitForChild("HumanoidRootPart"),
		character:WaitForChild("Head"),
	}

	for _, part in ipairs(essentialParts) do
		pcall(function() 
			_d.SetNetworkOwner(_d, part, player)
		end)
	end

	local humanoid = character:WaitForChild("Humanoid")
	local originalWalkSpeed = humanoid.WalkSpeed
	playerData[player].originalWalkSpeed = originalWalkSpeed

	humanoid:GetPropertyChangedSignal("WalkSpeed"):Connect(function()
		if math.abs(humanoid.WalkSpeed - originalWalkSpeed) > _o then
			_u(player, "Unexpected WalkSpeed change detected on server.")
		end
	end)
end

playerMovement.OnServerEvent:Connect(function(player, encryptedData1, encryptedData2)
	secureCall(function()
		local data1 = decryptData(encryptedData1)
		local data2 = encryptedData2 and decryptData(encryptedData2) or ""

		if data1 then
			if data1:sub(1, 23) == "PossibleTeleportDetected" then
				local distance = tonumber(data1:sub(25))
				handlePossibleTeleport(player, distance)
			elseif data1:sub(1, 16) == "WalkSpeedChanged" then
				local newWalkSpeed = tonumber(data1:sub(18))
				handleWalkSpeedChange(player, newWalkSpeed)
			elseif data1:sub(1, 13) == "InputDetected" then
				local inputInfo = data1:sub(15)
				handleInputDetected(player, inputInfo)
			else
				local positionParts = string.split(data1, ",")
				local velocityParts = string.split(data2, ",")

				if #positionParts == 3 and #velocityParts == 3 then
					local position = Vector3.new(tonumber(positionParts[1]), tonumber(positionParts[2]), tonumber(positionParts[3]))
					local velocity = Vector3.new(tonumber(velocityParts[1]), tonumber(velocityParts[2]), tonumber(velocityParts[3]))
					validatePlayerMovement(player, position, velocity)
				end
			end
		end
	end)
end)

_a.PlayerAdded:Connect(function(player)
	if isPlayerBanned(player) then
		_u(player, _m)
		return
	end

	player.CharacterAdded:Connect(function(character)
		onCharacterAdded(player, character)
	end)

	if player.Character then
		onCharacterAdded(player, player.Character)
	end
end)

_a.PlayerRemoving:Connect(removePlayerData)

-- Set up periodic checks
_c.Heartbeat:Connect(function()
	for player, data in pairs(playerData) do
		if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
			local position = player.Character.HumanoidRootPart.Position
			local velocity = player.Character.HumanoidRootPart.Velocity
			validatePlayerMovement(player, position, velocity)
		end
	end
end)
