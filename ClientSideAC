local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

-- Obfuscate important variable names
local _a, _b, _c, _d = Players, ReplicatedStorage, RunService, UserInputService

local player = _a.LocalPlayer

-- Create a secure random number generator
local random = Random.new(tick())

-- Encryption key handling
local encryptionKeys = {}
local function rotateEncryptionKey()
	table.insert(encryptionKeys, 1, _b:WaitForChild("EncryptionKey").Value)
	if #encryptionKeys > 5 then
		table.remove(encryptionKeys)
	end
end
rotateEncryptionKey()
_c.Heartbeat:Connect(function()
	if random:NextNumber() < 0.001 then  -- 0.1% chance each heartbeat
		rotateEncryptionKey()
	end
end)

local function securityWrapper(func)
	return function(...)
		if debug.info(2, "s") ~= script.Name then
			player:Kick("Try Again!")
			return
		end
		return func(...)
	end
end

local function waitForRemote(name, timeout)
	local remote = _b:FindFirstChild(name)
	local startTime = tick()
	while not remote do
		if tick() - startTime > timeout then
			error("Timeout waiting for RemoteEvent: " .. name)
		end
		remote = _b:FindFirstChild(name)
		task.wait(0.1)
	end
	return remote
end

local playerMovement = waitForRemote("PlayerMovement", 10)
local kickRemote = waitForRemote("KickRemote", 10)

local function encryptData(data)
	local key = encryptionKeys[1]
	local dataBytes = {string.byte(data, 1, -1)}
	local keyBytes = {string.byte(key, 1, -1)}
	local iv = table.create(16, 0)
	for i = 1, 16 do iv[i] = random:NextInteger(0, 255) end

	local encrypted = table.create(#dataBytes, 0)
	for i = 1, #dataBytes do
		encrypted[i] = bit32.bxor(dataBytes[i], keyBytes[(i - 1) % #keyBytes + 1], iv[(i - 1) % 16 + 1])
	end

	return string.char(unpack(iv)) .. string.char(unpack(encrypted))
end

local function waitForCharacter()
	return player.Character or player.CharacterAdded:Wait()
end

local character, humanoid, rootPart

local function updateCharacterReferences()
	character = waitForCharacter()
	humanoid = character:WaitForChild("Humanoid")
	rootPart = character:WaitForChild("HumanoidRootPart")
end

updateCharacterReferences = securityWrapper(updateCharacterReferences)

local function monitorWalkSpeed()
	if not humanoid then return end

	task.wait(1)  -- Wait for 1 second after character spawn
	local originalWalkSpeed = humanoid.WalkSpeed

	humanoid:GetPropertyChangedSignal("WalkSpeed"):Connect(function()
		if math.abs(humanoid.WalkSpeed - originalWalkSpeed) > 0.1 then  -- Allow small tolerance
			playerMovement:FireServer(encryptData("WalkSpeedChanged," .. tostring(humanoid.WalkSpeed)), encryptData(""))
			player:Kick("Unexpected WalkSpeed change detected on client.")
		end
	end)
end

monitorWalkSpeed = securityWrapper(monitorWalkSpeed)

local function sendPlayerMovement()
	if not rootPart then return end

	local position = rootPart.Position
	local velocity = rootPart.Velocity

	local positionString = string.format("%.2f,%.2f,%.2f", position.X, position.Y, position.Z)
	local velocityString = string.format("%.2f,%.2f,%.2f", velocity.X, velocity.Y, velocity.Z)

	playerMovement:FireServer(encryptData(positionString), encryptData(velocityString))
end

sendPlayerMovement = securityWrapper(sendPlayerMovement)

kickRemote.OnClientEvent:Connect(function(message)
	player:Kick(message)
end)

local function onCharacterAdded(newCharacter)
	updateCharacterReferences()
	monitorWalkSpeed()
end

onCharacterAdded = securityWrapper(onCharacterAdded)

-- Set up input detection
local inputBuffer = {}
local function handleInput(input, gameProcessed)
	if gameProcessed then return end

	table.insert(inputBuffer, {input = input.KeyCode.Name, time = tick()})
	if #inputBuffer > 20 then
		table.remove(inputBuffer, 1)
	end

	if #inputBuffer == 20 and inputBuffer[20].time - inputBuffer[1].time < 1 then
		playerMovement:FireServer(encryptData("RapidInputDetected"), encryptData(""))
	end
end
_d.InputBegan:Connect(handleInput)

-- Set up anti-teleport detection
local lastPosition = Vector3.new(0, 0, 0)
local function checkTeleport()
	if not rootPart then return end

	local currentPosition = rootPart.Position
	local distance = (currentPosition - lastPosition).Magnitude

	if distance > 50 then  -- Adjust this threshold as needed
		playerMovement:FireServer(encryptData("PossibleTeleportDetected," .. tostring(distance)), encryptData(""))
	end

	lastPosition = currentPosition
end
_c.Heartbeat:Connect(checkTeleport)

player.CharacterAdded:Connect(onCharacterAdded)

if player.Character then
	onCharacterAdded(player.Character)
end

_c.Heartbeat:Connect(sendPlayerMovement)

-- Additional security measures
_c.Heartbeat:Connect(function()
	if not _c:IsClient() then
		player:Kick("Client-server mismatch detected.")
	end
	if not _d:IsKeyDown(Enum.KeyCode.Unknown) then
		player:Kick("Input simulation detected.")
	end
end)

-- Memory usage monitoring
local initialMemory = gcinfo()
_c.Heartbeat:Connect(function()
	if math.abs(gcinfo() - initialMemory) > 1000 then  -- Adjust threshold as needed
		player:Kick("Unusual memory usage detected.")
	end
end)
